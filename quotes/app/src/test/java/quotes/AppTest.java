/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    public void testJsonReader() throws FileNotFoundException {

        BufferedReader reader = new BufferedReader(new FileReader("C:\\Users\\LTUC\\Desktop\\401asac\\quotes\\quotes\\app\\src\\main\\java\\quotes\\recentquotes.json"));
        assertNotNull(
                "testJsonReader should return: ",
                String.valueOf(reader)
        );
    }
    @Test
    public void testConstructorQuote(){
        Quotes quot = new Quotes(null, "Amara", "infinite likes","All monsters are human");
        assertEquals(null, quot.getTags());
        assertEquals("Amara", quot.getAuthor());
        assertEquals("infinite likes", quot.getLikes());
        assertEquals("All monsters are human", quot.getText());

    }

    @RepeatedTest(50)
    @Test
    public void testRandomQuote() throws FileNotFoundException{
        Gson gson = new Gson();
        int idx =0;
        BufferedReader reader = new BufferedReader(new FileReader("C:\\Users\\LTUC\\Desktop\\401asac\\quotes\\quotes\\app\\src\\main\\java\\quotes\\recentquotes.json"));
        List<Quotes> quote = gson.fromJson(reader, new TypeToken<List<Quotes>>() {}.getType());
        int min = 0;
        int max = quote.size()-1 ;
        Quotes quote1 = quote.get((int) (Math.random()*(max- min+1)+ min));
        for(int i = 0; i < quote.size(); i++) {
            if(quote.get(i).getText().equals(quote1.getText())){
                idx = i;
            }
        }
        assertTrue(idx >= 0 && idx < quote.size()-1 , "return true if successfully got a random quote from the json file ");
    }

    @Test
    public void testAPI() throws IOException {
        URL url = new URL("http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        assertEquals(403, connection.getResponseCode(), String.valueOf(true));
    }
//    @Test void appHasAGreeting() {
//        App classUnderTest = new App();
//        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
//    }
//    @Test
//    public void contructorQuote (){
//        Quote quote = new Quote(null,"Author","likes","text");
//        assertEquals(null, quote.getTags());
//        assertEquals("Author", quote.getAuthor());
//        assertEquals("likes", quote.getLikes());
//        assertEquals("text", quote.getText());
//    }
//    @Test
//    public void testJsonReader() throws FileNotFoundException {
//        BufferedReader reader = new BufferedReader(new FileReader("C:\\Users\\LTUC\\Desktop\\401asac\\quotes\\quotes\\app\\src\\main\\java\\quotes\\recentquotes.json"));
//        assertNotNull(
//                " Reader return: ",
//                String.valueOf(reader)
//        );
//    }
//
//    @RepeatedTest(100)
//    public void testFunctionality() throws IOException {
//        Gson gson = new Gson();
//        BufferedReader reader = new BufferedReader(new FileReader("C:\\Users\\LTUC\\Desktop\\401asac\\quotes\\quotes\\app\\src\\main\\java\\quotes\\recentquotes.json"));
//        List<Quote> quotes = gson.fromJson(reader, new TypeToken<List<Quote>>() {}.getType());
//        int min =0;
//        int max = quotes.size()-1;
//         Quote quote = quotes.get((int) (Math.random()*(max-min+1)+min));
//        int index = 0;
//        for (int i = 0; i < quotes.size()-1 ; i++) {
//            if(quotes.get(i).getText().equals(quote.getText())){
//                index = i;
//            }
//        }
//    assertTrue(index >= 0 && index < quotes.size()-1 , "return true if got a random quote from the json file ");    }
}
